#!/usr/bin/env ruby

require 'json'
require 'ostruct'
require 'byebug'

error_message = "Not enough arguments. Please use the following format:"
error_message += " templater.rb [template_name] [data_name] [output_file_name]"
raise error_message if ARGV.size < 2

BLOCK_KEYWORDS = ["EACH"]
FLOW_KEYWORDS = ["IF", "UNLESS", "ELSE", "ELSIF"]
END_KEYWORDS = ["END"]
ALL_KEYWORDS = [END_KEYWORDS, BLOCK_KEYWORDS, FLOW_KEYWORDS]
KEYWORDS_SYMBOL = {END_KEYWORDS => :end, BLOCK_KEYWORDS => :block, FLOW_KEYWORDS => :flow}

def parse(template, context)
  terms = template.split(/(<\*)\s*(.*?)\s*\*>/)
  stringified_ruby = "Proc.new do |params, output|\n params ||= {}; html=''\n"

  while current_term = terms.shift
    next_term = terms.first unless terms.empty?

    if contains_ruby?(current_term)
      keyword_type = keyword_type?(next_term)
      current_term = terms.shift unless keyword_type.nil?

      case keyword_type
      when :end then stringified_ruby << "end\n"
      when :block
        parsed_line = parse_block_keyword(current_term)
        stringified_ruby << "#{parsed_line}\n"
      when :flow then stringified_ruby << "#{current_term.downcase}\n"
      else stringified_ruby << "html << (#{terms.shift}).to_s\n"
      end

    else
      stringified_ruby << "html << #{current_term.inspect}\n"
    end
  end

  stringified_ruby << "html; end"
  context.instance_eval(stringified_ruby)
end

def contains_ruby?(term)
  term == "<*"
end


def keyword_type?(term)
  ALL_KEYWORDS.each do |arr|
    return KEYWORDS_SYMBOL[arr] if arr.any? { |keyword| term.include?(keyword)}
  end
  nil
end

def parse_block_keyword(term)
  method, key, param_name = term.split(" ")
  "#{key}.#{method.downcase} do |#{param_name}|"
end

template_name, data_name, output_name = ARGV
output_name ||= "output.html"
data_object = JSON.parse(IO.read(data_name), object_class: OpenStruct)

_proc = parse(IO.read(template_name), data_object)
output_html = _proc.call

File.open(output_name, 'w') {|file| file.puts output_html}
puts "Successfully saved to #{output_name}"
